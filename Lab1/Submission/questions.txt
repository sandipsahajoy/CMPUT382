Part 1:

Q1:
Answer: Incorrect declaration of int type pointer and variable. Missing assignment of int variable address to int type pointer.
 
Correct Code:
	void test1()
	{
		int *a, x = 3;
		a = &x;
		*a = *a + 2;
		printf("%d",*a);
	}
	
Q2:
Answer: Incorrect int type pointer(b) declaration.

Correct Code:
	void test2()
	{
		int *a, *b;
		a = (int*) malloc(sizeof(int));
		b = (int*) malloc(sizeof(int));
		if (!(a && b))
		{
			printf("Out of memory");
			exit(-1);
		}
		*a = 2;
		*b = 3;
		printf("%d\n%d",*a,*b);
	} 
	
Q3:
Answer: Incorrect dynamic memory allocation for 1000 integers.

Correct Code:
	void test3()
	{
		int i, *a = (int*) malloc(1000*sizeof(int));
		if (!a)
		{
			printf("Out of memory");
			exit(-1);
		}
		for (i = 0; i < 1000; i++)
		{
			*(i+a)=i;
			printf("%d\n",*(i+a));
		}    
	}
	
Q4:
Answer: Incorrect dynamic memory allocation for a 2D array.

Correct Code:
	void test4()
	{
		int **a = (int**) malloc(3 * sizeof(int*));
		for (int i=0; i<3; i++) 
		{
			a[i] = (int*)malloc(100 * sizeof(int));
		}
		a[1][1] = 5;
		printf("%d",a[1][1]);
	} 
	
Q5:
Answer: Incorrect pointer dereferening at if statement.

Correct Code:
	void test5()
	{
		int *a = (int*) malloc(sizeof(int));
		scanf("%d",a);
		if (!*a)
		{
			printf("Value is 0\n");
		}   
	}

	

Part 2:
Answer:
y_1[n] = x[n-1] + x[n] + x[n+1] 
Since GPU is good for parallel processing, this calculation will have easier and faster implementation on the GPU because of data parallelization. Here, data is not loaded from memory address of the output array, and stored to the same array like the other given equation on the question. Data is loaded from address of one array(x) and stored to another array address(y). This makes faster implementation on the GPU.



Part 4:

Q1: What is the device name (GPU)? 
Answer: GeForce GTX 750 Ti

Q2: Suppose you are launching a one-dimensional grid and block. If the hardware's maximum grid dimension is 65535 and the maximum block dimension is 512, what is the maximum number threads can be launched on the GPU? 
Answer: 65535 x 512 = 33553920

Q3: Under what conditions might a programmer choose not want to launch the maximum number of threads? 
Answer: A programmer might not choose to launch the maximum number of threads where maximum number of threads is not required because that might be inefficient approach.

Q4: What can limit a program from launching the maximum number of threads on a GPU? 
Answer: Limitation of thread resource can limit a program from launching the maximum number of threads on a GPU because every block contains a certain number of threads.

Q5: What is the maximum global memory size? 
Answer: 2147483648

Q6: What is global memory? 
Answer: Main memory(DRAM) present on the GPU.

Q7: What is the maximum constant memory size? 
Answer: 65536

Q8: What is constant memory? 
Answer: The memory used for data that will not change over the course of a kernel execution.

Q9: What is the maximum shared memory size per block? 
Answer: 49152

Q10: What is shared memory? 
Answer: The memory which is allocated per thread block, so all threads in the same block have access to the same memory. It's only useful if its required to access data more than once, either within the same thread or from different threads within the same block.

Q11: What is the maximum block dimensions? 
Answer: 1024 x 1024 x 64

Q12: What is the maximum grid dimensions? 
Answer: 2147483647 x 65535 x 65535

Q13: What is the warp size?
Answer: 32

Q14: What does warp size signify on a GPU? 
Answer: Warp size is the number of threads that a GPU(multiprocessor) executes concurrently. An NVIDIA GPU can execute several threads from the same block at the same time, using hardware multithreading.

